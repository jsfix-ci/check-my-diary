version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.0.2
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            kubectl config use-context circleci
  deploy_to_env:
    parameters:
      env:
        type: string
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP=check-my-diary
            APP_VERSION=$(cat app-version.txt)
            sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/${APP}/Chart.yaml
            helm upgrade ${APP} ~/git/helm_deploy/${APP}/. \
              --install --wait --reset-values --timeout 5m --history-max 10 \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --set image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/node:13-buster-browsers
    working_directory: ~/app

orbs:
  kubernetes: circleci/kubernetes@0.10.1
  helm: circleci/helm@0.2.3

jobs:
  validate:
    executor: builder
    steps:
      - checkout
      - helm/install-helm-client:
          version: v2.13.1
      - run:
          name: Run helm lint
          command: helm lint check-my-diary --values=values-dev.yaml --values=secrets-example.yaml
          working_directory: helm_deploy

  build:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            DATE=$(date '+%Y-%m-%d')
            SHORT_SHA1=$(echo $CIRCLE_SHA1 | cut -c1-7)
            APP_VERSION="${DATE}_${CIRCLE_BUILD_NUM}_${SHORT_SHA1}"
            echo $APP_VERSION | tee app-version.txt
            IMAGE_NAME="quay.io/hmpps/check-my-diary"
            docker build --rm=false . \
              --tag "${IMAGE_NAME}:${APP_VERSION}" \
              --label "app.version=$APP_VERSION" \
              --label "build.version=$APP_VERSION" \
              --label "build.number=$CIRCLE_BUILD_NUM" \
              --label "build.url=$CIRCLE_BUILD_URL" \
              --label "build.gitref=$CIRCLE_SHA1"

            if [[ "${CIRCLE_BRANCH}" == "master" ]] || [[ "${CIRCLE_BRANCH}" == "circle_updates" ]]; then
              #push to quay.io
              docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
              docker tag "${IMAGE_NAME}:$APP_VERSION" "${IMAGE_NAME}:latest"
              docker push "${IMAGE_NAME}:${APP_VERSION}"
              docker push "${IMAGE_NAME}:latest"
            fi
      - persist_to_workspace:
          root: .
          paths:
            - app-version.txt

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - build:
          filters:
            branches:
              only:
                - master
                - circle_updates
      - deploy_dev:
          requires:
            - build
            - validate 
          filters:
            branches:
              only:
                - master
                - circle_updates
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: check-my-diary-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: check-my-diary-prod
          requires:
            - request-prod-approval
